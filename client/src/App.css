import React, { useState } from "react";
import EquipmentForm from "./components/EquipmentForm";
import TaskForm from "./components/TaskForm";
import EquipmentTree from "./components/EquipmentTree";
import ManageEquipment from "./components/ManageEquipment";
import NavSidebar from "./components/NavSidebar";
import { AppProvider, useAppContext } from "./context/AppContext";

const AppContent: React.FC = () => {
  const { equipmentData, inventoryData, maintenanceTasks, fetchData, handleTaskUpdated, handleTaskDeleted, handleEquipmentUpdated, handleEquipmentDeleted } = useAppContext();
  const [activeSection, setActiveSection] = useState("tasks");
  const topLevelEquipment = equipmentData.filter((e) => !e.parentId);
  const equipmentWithTasks = topLevelEquipment.filter(equip => 
    maintenanceTasks.some(task => task.equipmentId === equip.id)
  );

  const renderContent = () => {
    switch (activeSection) {
      case "tasks":
        return (
          <div className="max-h-[600px] overflow-auto p-6">
            {equipmentWithTasks.length > 0 ? (
              equipmentWithTasks.map((equip) => (
                <EquipmentTree
                  key={equip.id}
                  equipment={equip}
                  allEquipment={equipmentData}
                  inventoryData={inventoryData}
                  maintenanceTasks={maintenanceTasks}
                  onTaskUpdated={handleTaskUpdated}
                  onTaskDeleted={handleTaskDeleted} // Fixed: Added here
                  onEquipmentUpdated={handleEquipmentUpdated}
                  onEquipmentDeleted={handleEquipmentDeleted}
                />
              ))
            ) : (
              <p className="text-gray-600">No equipment with tasks found</p>
            )}
          </div>
        );
      case "add-equipment":
        return (
          <EquipmentForm
            equipmentData={equipmentData}
            inventoryData={inventoryData}
            onEquipmentAdded={fetchData}
          />
        );
      case "add-task":
        return (
          <TaskForm
            equipmentData={equipmentData}
            onTaskAdded={fetchData}
          />
        );
      case "manage-equipment":
        return <ManageEquipment />;
      case "full-hierarchy":
        return (
          <div className="max-h-[600px] overflow-auto">
            {equipmentData.length > 0 ? (
              topLevelEquipment.length > 0 ? (
                topLevelEquipment.map((equip) => (
                  <EquipmentTree
                    key={equip.id}
                    equipment={equip}
                    allEquipment={equipmentData}
                    inventoryData={inventoryData}
                    maintenanceTasks={maintenanceTasks}
                    onTaskUpdated={handleTaskUpdated}
                    onTaskDeleted={handleTaskDeleted} // Fixed: Added here
                    onEquipmentUpdated={handleEquipmentUpdated}
                    onEquipmentDeleted={handleEquipmentDeleted}
                    level={0}
                  />
                ))
              ) : (
                <p>No top-level equipment found</p>
              )
            ) : (
              <p>No equipment found</p>
            )}
          </div>
        );
      default:
        return <div>Select a section from the sidebar</div>;
    }
  };

  return (
    <div className="flex">
      <NavSidebar activeSection={activeSection} setActiveSection={setActiveSection} />
      <div className="flex-1">{renderContent()}</div>
    </div>
  );
};

function App() {
  return (
    <AppProvider>
      <AppContent />
    </AppProvider>
  );
}

export default App;